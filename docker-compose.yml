services:

  nats-server: 
    image: nats:latest # Recomendado usar una versión fija
    ports: 
      - "8222:8222" # Exponer el puerto de administración de NATS


  client-gateway:
    build: ./client-gateway  # Ruta al Dockerfile del gateway
    ports:
      - ${CLIENT_GATEWAY_PORT}:3000  # Expone el puerto 3000
    volumes:
      - ./client-gateway/src:/usr/src/app/src  # Sincroniza el código fuente local con el contenedor
    command: npm run start:dev  # Ejecuta el servicio en modo de desarrollo
    environment:
      - PORT=3000  # Expone la variable de entorno PORT para el servicio
      - NATS_SERVERS=nats://nats-server:4222 # "nats-server" hace referencia al servicio declarado arriba del client gateway


  products-ms:
    build: ./products-ms  # Ruta al Dockerfile del microservicio de productos
    volumes:
      - ./products-ms/src:/usr/src/app/src  # Sincroniza el código fuente local con el contenedor
    command: npm run start:dev  # Ejecuta el servicio en modo de desarrollo
    environment:
      - PORT=3001  # Variable de entorno para el puerto del microservicio
      - NATS_SERVERS=nats://nats-server:4222  # Conexión con el servidor NATS
      - DATABASE_URL=file:./dev.db  # Conexión con la base de datos local (Prisma)


  orders-ms:
    depends_on:
      - orders-db
    build: ./orders-ms  # Ruta al Dockerfile del microservicio de ordenes
    volumes:
      - ./orders-ms/src:/usr/src/app/src  # Sincroniza el código fuente local con el contenedor
    command: npm run start:dev  # Ejecuta el servicio en modo de desarrollo
    environment:
      - PORT=3002 # Variable de entorno para el puerto del microservicio
      - NATS_SERVERS=nats://nats-server:4222  # Conexión con el servidor NATS
      - DATABASE_URL=postgresql://postgres:123456@orders-db:5432/ordersdb?schema=public&connect_timeout=30&pool_timeout=30&socket_timeout=30
    

  orders-db:
      container_name: orders_database
      image: postgres:16.2 
      restart: always 
      volumes:
        - ./orders-ms/postgres:/var/lib/postgresql/data
      ports: 
        - 5432:5432
      environment:
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD=123456
        - POSTGRES_DB=ordersdb


  payments-ms:
    build: ./payments-ms  # Ruta al Dockerfile del microservicio de pagos
    ports:
    - ${PAYMENTS_PORT}:${PAYMENTS_PORT}  # Expone el puerto 
    volumes:
      - ./payments-ms/src:/usr/src/app/src  # Sincroniza el código fuente local con el contenedor
    command: npm run start:dev  # Ejecuta el servicio en modo de desarrollo
    environment:
      - PORT=${PAYMENTS_PORT}
      - STRIPE_SECRET=${PAYMENTS_STRIPE_SECRET}
      - STRIPE_SUCCESS_URL=${PAYMENTS_STRIPE_SUCCESS_URL}
      - STRIPE_CANCEL_URL=${PAYMENTS_STRIPE_CANCEL_URL}
      - STRIPE_ENDPOINT_SECRET=${PAYMENTS_STRIPE_ENDPOINT_SECRET}
      - NATS_SERVERS=nats://nats-server:4222  # Conexión con el servidor NATS
 

  auth-ms:
    build: ./auth-ms  # Ruta al Dockerfile del microservicio de autenticación
    volumes:
      - ./auth-ms/src:/usr/src/app/src  # Sincroniza el código fuente local con el contenedor
    command: npm run start:dev  # Ejecuta el servicio en modo de desarrollo
    environment:
      - PORT=${AUTH_PORT}
      - NATS_SERVERS=nats://nats-server:4222  # Conexión con el servidor NATS
      - DATABASE_URL=${AUTH_DATABASE_URL}
      - JWT_SECRET=${AUTH_JWT_SECRET}